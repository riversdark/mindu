# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/pl.ipynb.

# %% auto 0
__all__ = ['Atom']

# %% ../nbs/pl.ipynb 6
from sys import stdout, exit, stderr
import os, math, fnmatch
import platform
import urllib.request
import warnings
warnings.filterwarnings('ignore')

import ipywidgets as widgets
from IPython.display import SVG
from IPython.display import Image
from IPython.display import set_matplotlib_formats

import matplotlib.pyplot as plt
from matplotlib import colors
import seaborn as sb

from statistics import mean, stdev
import numpy as np
import scipy.cluster.hierarchy
from scipy.spatial.distance import squareform
import scipy.stats as stats
from scipy.interpolate import griddata
import pandas as pd

import rdkit
from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem import rdMolTransforms
from rdkit.Chem import rdDepictor
from rdkit.Chem import rdForceFieldHelpers
from rdkit.Chem import AllChem
from rdkit.Chem.Draw import rdMolDraw2D
from rdkit.Chem.Draw import IPythonConsole
AllChem.SetPreferCoordGen(True)

from openbabel import pybel
from biopandas.pdb import PandasPdb
import parmed as pmd

import openmm as mm
from openmm import *
from openmm.app import *
from openmm.unit import *
from openmm import app, unit
from openmm.app import HBonds, NoCutoff, PDBFile
from openff.toolkit.topology import Molecule, Topology
from openff.toolkit.typing.engines.smirnoff import ForceField
from openff.toolkit.utils import get_data_file_path

import pytraj as pt
from pytraj import matrix
import mdtraj as md
import MDAnalysis as mda
from MDAnalysis.analysis import align, rms
import py3Dmol

# %% ../nbs/pl.ipynb 69
class Atom(dict):
  """This class defines a single atom in a PDB file.
  """
  def __init__(self, line):
    """Initialize the Atom object from a line in a PDB file.
    """
    self["type"] = line[0:6].strip()
    self["idx"] = line[6:11].strip()
    self["name"] = line[12:16].strip()
    self["resname"] = line[17:20].strip()
    self["resid"] = int(int(line[22:26]))
    self["x"] = float(line[30:38])
    self["y"] = float(line[38:46])
    self["z"] = float(line[46:54])
    self["sym"] = line[76:78].strip()

  def __str__(self):
    """Return a string representation of the Atom object.
    """
    line = list(" " * 80)
    line[0:6] = self["type"].ljust(6)
    line[6:11] = self["idx"].ljust(5)
    line[12:16] = self["name"].ljust(4)
    line[17:20] = self["resname"].ljust(3)
    line[22:26] = str(self["resid"]).ljust(4)
    line[30:38] = str(self["x"]).rjust(8)
    line[38:46] = str(self["y"]).rjust(8)
    line[46:54] = str(self["z"]).rjust(8)
    line[76:78] = self["sym"].rjust(2)
    return "".join(line) + "\n"

